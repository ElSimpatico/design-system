/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonType, ButtonVariantType } from "./components/atoms/button/types";
import { CheckboxEventDetail } from "./components/atoms/checkbox/types";
import { InputEventDetail, InputType } from "./components/atoms/input/types";
export { ButtonType, ButtonVariantType } from "./components/atoms/button/types";
export { CheckboxEventDetail } from "./components/atoms/checkbox/types";
export { InputEventDetail, InputType } from "./components/atoms/input/types";
export namespace Components {
    interface UiButton {
        /**
          * Specifies the alternative text
         */
        "accessibleLabel"?: string;
        /**
          * Specifies if button is  disabled
         */
        "disabled"?: boolean;
        /**
          * Specifies the type attribute for the native button ("button", "submit", "reset").
         */
        "type"?: ButtonType;
        /**
          * Specfifies the button variant
         */
        "variant"?: ButtonVariantType;
    }
    interface UiCheckbox {
        /**
          * Specifies the alternative text
         */
        "accessibleLabel"?: string;
        /**
          * Specifies if the input is checked
         */
        "checked"?: boolean;
        /**
          * Specifies if checkbox is  disabled
         */
        "disabled"?: boolean;
        /**
          * Specifies the native input id
         */
        "identifier"?: string;
        /**
          * Specifies the native input name
         */
        "name"?: string;
        /**
          * Specifies if the input is required
         */
        "required"?: boolean;
        /**
          * Specifies the input value
         */
        "value"?: string;
    }
    interface UiHelloworld {
        /**
          * The first name
         */
        "firstName": string;
    }
    interface UiInput {
        /**
          * Specifies the alternative text for the label
         */
        "accessibleLabel"?: string;
        /**
          * Specifies if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Specifies if the input state error is enabled
         */
        "error"?: boolean;
        /**
          * Specifies the native input id
         */
        "identifier"?: string;
        /**
          * Specifies the text for the label
         */
        "label"?: string;
        /**
          * Specifies the native input name
         */
        "name"?: string;
        /**
          * Specifies the hint text to display
         */
        "placeholder"?: string;
        /**
          * Specifies if the input is read-only
         */
        "readonly"?: boolean;
        /**
          * Specifies if the input is required
         */
        "required"?: boolean;
        /**
          * Specifies the input type ("text", "password", "email")
         */
        "type"?: InputType;
        /**
          * Specifies the input value
         */
        "value"?: string;
    }
    interface UiTab {
        /**
          * Specifies the aria-controls attribute for the native button
         */
        "accessibleControls"?: string;
        /**
          * Specifies the alternative text
         */
        "accessibleLabel"?: string;
        /**
          * Specifies if the tab is disabled
         */
        "disabled"?: boolean;
        /**
          * Specifies the native button id
         */
        "identifier"?: string;
        /**
          * Specifies if the tab is selected
         */
        "selected"?: boolean;
    }
    interface UiTabPanel {
        /**
          * Specifies id's that indicate alternative labels elements
         */
        "accessibleLabelledBy"?: string;
        /**
          * Specifies the id of the tabpanel element
         */
        "identifier"?: string;
    }
    interface UiTabs {
        /**
          * Specifies the identifier for the initial selected tab
         */
        "selectedTab"?: string;
        /**
          * Specifies if tab list is displayed vertically
         */
        "vertical"?: boolean;
    }
}
export interface UiButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiButtonElement;
}
export interface UiCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiCheckboxElement;
}
export interface UiInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiInputElement;
}
export interface UiTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiTabElement;
}
declare global {
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiCheckboxElement extends Components.UiCheckbox, HTMLStencilElement {
    }
    var HTMLUiCheckboxElement: {
        prototype: HTMLUiCheckboxElement;
        new (): HTMLUiCheckboxElement;
    };
    interface HTMLUiHelloworldElement extends Components.UiHelloworld, HTMLStencilElement {
    }
    var HTMLUiHelloworldElement: {
        prototype: HTMLUiHelloworldElement;
        new (): HTMLUiHelloworldElement;
    };
    interface HTMLUiInputElement extends Components.UiInput, HTMLStencilElement {
    }
    var HTMLUiInputElement: {
        prototype: HTMLUiInputElement;
        new (): HTMLUiInputElement;
    };
    interface HTMLUiTabElement extends Components.UiTab, HTMLStencilElement {
    }
    var HTMLUiTabElement: {
        prototype: HTMLUiTabElement;
        new (): HTMLUiTabElement;
    };
    interface HTMLUiTabPanelElement extends Components.UiTabPanel, HTMLStencilElement {
    }
    var HTMLUiTabPanelElement: {
        prototype: HTMLUiTabPanelElement;
        new (): HTMLUiTabPanelElement;
    };
    interface HTMLUiTabsElement extends Components.UiTabs, HTMLStencilElement {
    }
    var HTMLUiTabsElement: {
        prototype: HTMLUiTabsElement;
        new (): HTMLUiTabsElement;
    };
    interface HTMLElementTagNameMap {
        "ui-button": HTMLUiButtonElement;
        "ui-checkbox": HTMLUiCheckboxElement;
        "ui-helloworld": HTMLUiHelloworldElement;
        "ui-input": HTMLUiInputElement;
        "ui-tab": HTMLUiTabElement;
        "ui-tab-panel": HTMLUiTabPanelElement;
        "ui-tabs": HTMLUiTabsElement;
    }
}
declare namespace LocalJSX {
    interface UiButton {
        /**
          * Specifies the alternative text
         */
        "accessibleLabel"?: string;
        /**
          * Specifies if button is  disabled
         */
        "disabled"?: boolean;
        /**
          * Emmited when button has been clicked
         */
        "onButtonClick"?: (event: UiButtonCustomEvent<void>) => void;
        /**
          * Specifies the type attribute for the native button ("button", "submit", "reset").
         */
        "type"?: ButtonType;
        /**
          * Specfifies the button variant
         */
        "variant"?: ButtonVariantType;
    }
    interface UiCheckbox {
        /**
          * Specifies the alternative text
         */
        "accessibleLabel"?: string;
        /**
          * Specifies if the input is checked
         */
        "checked"?: boolean;
        /**
          * Specifies if checkbox is  disabled
         */
        "disabled"?: boolean;
        /**
          * Specifies the native input id
         */
        "identifier"?: string;
        /**
          * Specifies the native input name
         */
        "name"?: string;
        /**
          * Emmited when the checkbox loses focus
         */
        "onCheckboxBlur"?: (event: UiCheckboxCustomEvent<CheckboxEventDetail>) => void;
        /**
          * Emmited when the checkbox has changed
         */
        "onCheckboxChange"?: (event: UiCheckboxCustomEvent<CheckboxEventDetail>) => void;
        /**
          * Emmited when the checkbox has focus
         */
        "onCheckboxFocus"?: (event: UiCheckboxCustomEvent<CheckboxEventDetail>) => void;
        /**
          * Specifies if the input is required
         */
        "required"?: boolean;
        /**
          * Specifies the input value
         */
        "value"?: string;
    }
    interface UiHelloworld {
        /**
          * The first name
         */
        "firstName"?: string;
    }
    interface UiInput {
        /**
          * Specifies the alternative text for the label
         */
        "accessibleLabel"?: string;
        /**
          * Specifies if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Specifies if the input state error is enabled
         */
        "error"?: boolean;
        /**
          * Specifies the native input id
         */
        "identifier"?: string;
        /**
          * Specifies the text for the label
         */
        "label"?: string;
        /**
          * Specifies the native input name
         */
        "name"?: string;
        /**
          * Emmited when the input loses focus
         */
        "onInputBlur"?: (event: UiInputCustomEvent<InputEventDetail>) => void;
        /**
          * Emmited when the input has changed
         */
        "onInputChange"?: (event: UiInputCustomEvent<InputEventDetail>) => void;
        /**
          * Emmited when the input has focus
         */
        "onInputFocus"?: (event: UiInputCustomEvent<InputEventDetail>) => void;
        /**
          * Specifies the hint text to display
         */
        "placeholder"?: string;
        /**
          * Specifies if the input is read-only
         */
        "readonly"?: boolean;
        /**
          * Specifies if the input is required
         */
        "required"?: boolean;
        /**
          * Specifies the input type ("text", "password", "email")
         */
        "type"?: InputType;
        /**
          * Specifies the input value
         */
        "value"?: string;
    }
    interface UiTab {
        /**
          * Specifies the aria-controls attribute for the native button
         */
        "accessibleControls"?: string;
        /**
          * Specifies the alternative text
         */
        "accessibleLabel"?: string;
        /**
          * Specifies if the tab is disabled
         */
        "disabled"?: boolean;
        /**
          * Specifies the native button id
         */
        "identifier"?: string;
        /**
          * Emmited when the button has been clicked
         */
        "onTabSelect"?: (event: UiTabCustomEvent<void>) => void;
        /**
          * Specifies if the tab is selected
         */
        "selected"?: boolean;
    }
    interface UiTabPanel {
        /**
          * Specifies id's that indicate alternative labels elements
         */
        "accessibleLabelledBy"?: string;
        /**
          * Specifies the id of the tabpanel element
         */
        "identifier"?: string;
    }
    interface UiTabs {
        /**
          * Specifies the identifier for the initial selected tab
         */
        "selectedTab"?: string;
        /**
          * Specifies if tab list is displayed vertically
         */
        "vertical"?: boolean;
    }
    interface IntrinsicElements {
        "ui-button": UiButton;
        "ui-checkbox": UiCheckbox;
        "ui-helloworld": UiHelloworld;
        "ui-input": UiInput;
        "ui-tab": UiTab;
        "ui-tab-panel": UiTabPanel;
        "ui-tabs": UiTabs;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            "ui-checkbox": LocalJSX.UiCheckbox & JSXBase.HTMLAttributes<HTMLUiCheckboxElement>;
            "ui-helloworld": LocalJSX.UiHelloworld & JSXBase.HTMLAttributes<HTMLUiHelloworldElement>;
            "ui-input": LocalJSX.UiInput & JSXBase.HTMLAttributes<HTMLUiInputElement>;
            "ui-tab": LocalJSX.UiTab & JSXBase.HTMLAttributes<HTMLUiTabElement>;
            "ui-tab-panel": LocalJSX.UiTabPanel & JSXBase.HTMLAttributes<HTMLUiTabPanelElement>;
            "ui-tabs": LocalJSX.UiTabs & JSXBase.HTMLAttributes<HTMLUiTabsElement>;
        }
    }
}
