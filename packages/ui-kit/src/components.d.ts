/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonType, ButtonVariantType } from "./components/atoms/button/types";
import { InputEventDetail, InputType } from "./components/atoms/input/types";
export { ButtonType, ButtonVariantType } from "./components/atoms/button/types";
export { InputEventDetail, InputType } from "./components/atoms/input/types";
export namespace Components {
    interface UiButton {
        /**
          * Specifies the alternative text
         */
        "accessibleLabel"?: string;
        /**
          * Specifies if button is  disabled
         */
        "disabled"?: boolean;
        /**
          * Specifies the type attribute for the native button ("button", "submit", "reset").
         */
        "type"?: ButtonType;
        /**
          * Specfifies the button variant
         */
        "variant"?: ButtonVariantType;
    }
    interface UiHelloworld {
        /**
          * The first name
         */
        "firstName": string;
    }
    interface UiInput {
        /**
          * Specifies the alternative text for the label
         */
        "accessibleLabel"?: string;
        /**
          * Specifies if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Specifies if the input state error is enabled
         */
        "error"?: boolean;
        /**
          * Specifies the native input id
         */
        "identifier"?: string;
        /**
          * Specifies the text for the label
         */
        "label"?: string;
        /**
          * Specifies the native input name
         */
        "name"?: string;
        /**
          * Specifies the hint text to display
         */
        "placeholder"?: string;
        /**
          * Specifies if the input is read-only
         */
        "readonly"?: boolean;
        /**
          * Specifies if the input is required
         */
        "required"?: boolean;
        /**
          * Specifies the input type ("text", "password", "email")
         */
        "type"?: InputType;
        /**
          * Specifies the input value
         */
        "value"?: string;
    }
}
export interface UiButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiButtonElement;
}
export interface UiInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiInputElement;
}
declare global {
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiHelloworldElement extends Components.UiHelloworld, HTMLStencilElement {
    }
    var HTMLUiHelloworldElement: {
        prototype: HTMLUiHelloworldElement;
        new (): HTMLUiHelloworldElement;
    };
    interface HTMLUiInputElement extends Components.UiInput, HTMLStencilElement {
    }
    var HTMLUiInputElement: {
        prototype: HTMLUiInputElement;
        new (): HTMLUiInputElement;
    };
    interface HTMLElementTagNameMap {
        "ui-button": HTMLUiButtonElement;
        "ui-helloworld": HTMLUiHelloworldElement;
        "ui-input": HTMLUiInputElement;
    }
}
declare namespace LocalJSX {
    interface UiButton {
        /**
          * Specifies the alternative text
         */
        "accessibleLabel"?: string;
        /**
          * Specifies if button is  disabled
         */
        "disabled"?: boolean;
        /**
          * Emmited when button has been clicked
         */
        "onButtonClick"?: (event: UiButtonCustomEvent<void>) => void;
        /**
          * Specifies the type attribute for the native button ("button", "submit", "reset").
         */
        "type"?: ButtonType;
        /**
          * Specfifies the button variant
         */
        "variant"?: ButtonVariantType;
    }
    interface UiHelloworld {
        /**
          * The first name
         */
        "firstName"?: string;
    }
    interface UiInput {
        /**
          * Specifies the alternative text for the label
         */
        "accessibleLabel"?: string;
        /**
          * Specifies if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Specifies if the input state error is enabled
         */
        "error"?: boolean;
        /**
          * Specifies the native input id
         */
        "identifier"?: string;
        /**
          * Specifies the text for the label
         */
        "label"?: string;
        /**
          * Specifies the native input name
         */
        "name"?: string;
        /**
          * Emmited when the input loses focus
         */
        "onInputBlur"?: (event: UiInputCustomEvent<InputEventDetail>) => void;
        /**
          * Emmited when the input has changed
         */
        "onInputChange"?: (event: UiInputCustomEvent<InputEventDetail>) => void;
        /**
          * Emmited when the input has focus
         */
        "onInputFocus"?: (event: UiInputCustomEvent<InputEventDetail>) => void;
        /**
          * Specifies the hint text to display
         */
        "placeholder"?: string;
        /**
          * Specifies if the input is read-only
         */
        "readonly"?: boolean;
        /**
          * Specifies if the input is required
         */
        "required"?: boolean;
        /**
          * Specifies the input type ("text", "password", "email")
         */
        "type"?: InputType;
        /**
          * Specifies the input value
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "ui-button": UiButton;
        "ui-helloworld": UiHelloworld;
        "ui-input": UiInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            "ui-helloworld": LocalJSX.UiHelloworld & JSXBase.HTMLAttributes<HTMLUiHelloworldElement>;
            "ui-input": LocalJSX.UiInput & JSXBase.HTMLAttributes<HTMLUiInputElement>;
        }
    }
}
